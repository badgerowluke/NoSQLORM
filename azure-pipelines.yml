# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  majorVersion: 0
  minorVersion: 2
  #NOTE: this allows for auto incrementing on the patch number each time it runs... reset when the major minor is updated...
  #https://kasunkodagoda.com/2019/04/03/hidden-gems-in-azure-pipelines-creating-your-own-rev-variable-using-counter-expression-in-azure-pipelines/
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion'], 0))]  

steps:
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- script: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Agent.TempDirectory)/coverage.xml
  displayName: 'Test' 
# - task: DotNetCoreCLI@2
#   displayName: Test
#   inputs:
#     command: test
#     projects: '**/*[Tt]est/*.csproj'
#     custom: "/p:CoverletOutputFormat=lcov /p:CoverletOutput='$(Agent.TempDirectory)/coverage/lcov.info'"  
#     nobuild: true
    


- task: PublishTestResults@2
  inputs:
    testRunner: xUnit
    testResultsFiles: '**/*.xml'
    searchFolder: '$(Agent.TempDirectory)'

- task: DotNetCoreCLI@2
  displayName: package the assembly
  inputs:
    command: pack
    nobuild: true
    versioningScheme: byPrereleaseNumber
    configurationToBack: $(buildConfiguration)
    packagesToPack: "**/*.csproj"
    majorVersion: '$(majorVersion)'
    minorVersion: '$(minorVersion)'
    patchVersion: '$(patchVersion)'


- task: NuGetCommand@2
  displayName: publish the assembly
  inputs:
      command: push
      publishVstsFeed: 'RelationalMapper'
      allowPackageconflicts: true
