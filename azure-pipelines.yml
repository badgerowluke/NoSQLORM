# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  majorVersion: 0
  minorVersion: 2
  #NOTE: this allows for auto incrementing on the patch number each time it runs... reset when the major minor is updated...
  #https://kasunkodagoda.com/2019/04/03/hidden-gems-in-azure-pipelines-creating-your-own-rev-variable-using-counter-expression-in-azure-pipelines/
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion'], 0))]  

steps:

- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud analysis'
  inputs:
    SonarCloud: 'SonarCloudService'
    organization: '$(SonarOrganization)'
    scannerMode: 'MSBuild'
    projectKey: '$(SonarProjectKey)'
    projectName: '$(SonarProjectName)'
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
      sonar.exclusions=**/wwwroot/lib/**/*
      
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], 'master')
    )


- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*[Tt]est/*.csproj'
    arguments:  '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true  /p:CoverletOutputFormat=cobertura   /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'



- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud code analysis'
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], 'master')
    )  
  
- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud quality gate results'  
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], 'master')
    )  

- task: WhiteSource Bolt@20
  displayName: 'Run WhiteSource Bolt'
  

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/TestResults/Coverage/*cobertura.xml
    reportDirectory: '$(Build.SourcesDirectory)/TestResults/Coverage'

- task: DotNetCoreCLI@2
  displayName: package the assembly
  inputs:
    command: pack
    nobuild: true
    versioningScheme: byPrereleaseNumber
    configurationToBack: $(buildConfiguration)
    packagesToPack: "**/*.csproj"
    majorVersion: '$(majorVersion)'
    minorVersion: '$(minorVersion)'
    patchVersion: '$(patchVersion)'


- task: NuGetCommand@2
  displayName: publish the assembly
  inputs:
      command: push
      publishVstsFeed: 'RelationalMapper'
      allowPackageconflicts: true
